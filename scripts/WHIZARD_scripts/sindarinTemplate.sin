#################################
# SINDARIN-MAIN-FILE            #
# AGC in VBS-Scattering         #
#################################
# Marco Sekulla                 #
# sekulla@physik.uni-siegen.de  #
# Adopted by:                   #
#   Jakob Beyer                 #
#   jakob.beyer@desy.de         #
# {date}     #
#################################

! openmp_num_threads = 6
?vis_history = false
?resonance_history = true
! accuracy_goal = 8

################################
# Parameters                   #
################################

  model = {model}
  string $modelname = "{model}"

  ?phs_keep_nonresonant = true

  {coupling}

  fkm = {fkm}
  eft_h = {eft_h}


################################
# Processes                    #
################################

  alias uptype_q = u:c:U:C
  alias downtype_q = d:s:b:D:S:B
  alias all_q = uptype_q:downtype_q
  alias neutrinos = n1:N1:n2:N2:n3:N3
  alias final_partons = all_q:neutrinos

  ! Make WHIZARD explicitly take care of final state polarizations
  polarized e1, e2 , e3, u, d, c, s, b, n1, n2, n3, E1, E2, E3, U, D, C, S, B, N1, N2, N3, Wp, Wm, Z, A

  process nunu_4q = {process}

  $out_file = "{out_file}"
  open_out ( $out_file )

  printf "################################################"
  printf "# Model = %s" ($modelname)
  printf "# Process = {process}"
  printf "# Parameters"
  printf "# AQGC"
  printf "#   a4  = %f   ; a5  = %f" (a4, a5)
  printf "#   FS0 = %f   ; FS1 = %f" (fs0, fs1)
  printf "# Kmatrix"
  printf "#   fkm = %f" (fkm) {sat_amplitudes}
  printf "################################################"

################################
# Beam                         #
################################

  ! Beam parameters: com-E, beam initial-state radiation, beam polarization
  sqrts = 1 TeV
  beams = electron, positron => circe2 => isr, isr 
  beams_pol_density  = {beam_polarization}
  beams_pol_fraction = 100%  , 100%

  ! Settings for ISR spectrum
  $circe2_file = "{polarization_file}" ! e.g. "500_TDR_ws_ee021.circe"
  $circe2_design = "ILC"
  ?circe2_polarized = false

  ! Compile the process into a process library
  compile

################################
# Cuts                         #
################################

  printf "################################################"
  printf "# Cuts :"
  printf "#   y_34_min = {y_34_min}"
  printf "################################################"

  ! Define cut values and set cuts 
  real y_34_min = {y_34_min}

  cuts =
    all kT/ (eval E**2 [ all_q + all_q + all_q + all_q ]) > y_34_min [ all_q, all_q ]

################################
# Start Integration            #
################################

  ! Fixed seed for reproducibility
  seed = 814995 

  integrate(nunu_4q) {{iterations = 1:30000 , 10:30000 , 1:30000}} ! Like DBD, but more calls due to more diagrams
  show(integral(nunu_4q))
  printf "Integral: %E , Error: %E " (integral(nunu_4q), error(nunu_4q))

  close_out ( $out_file )